#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;


void solve(long long N, long long W, std::vector<long long> wVec, std::vector<long long> vVec){

    // initialize dp
    vector<vector<long long>> dp(N+1, vector<long long>(W+1, -(1LL << 60)));

    // initial condition
    for(int n = 0; n <= N; n++) {
        dp[n][0] = 0;
    }

    // update dp
    for(int n = 1; n <= N; n++) {
        for(int w = 1; w <= W; w++) {
            if(w - wVec[n] >= 0) {
                dp[n][w] = max(
                    dp[n - 1][w],
                    dp[n - 1][w - wVec[n]] + vVec[n]
                );
            } else {
                dp[n][w] = dp[n - 1][w];
            }
        }
    }

    cout << *max_element(dp[N].begin(), dp[N].end()) << endl;

}

// Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    std::scanf("%lld", &N);
    long long W;
    std::scanf("%lld", &W);
    std::vector<long long> w(N+1);
    std::vector<long long> v(N+1);
    for(int i = 1 ; i <= N ; i++){
        std::scanf("%lld", &w[i]);
        std::scanf("%lld", &v[i]);
    }
    solve(N, W, std::move(w), std::move(v));
    return 0;
}
