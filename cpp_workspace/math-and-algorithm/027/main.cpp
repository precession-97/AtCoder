#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;

int N, A[200001], C[200001];

// A[l], A[l+1], ... , A[r-1]を昇順に整列する関数
void MergeSort(int l, int r) {
    // r-l=1 の場合、すでにソートされているので何もしない
    if (r - l == 1) return;

    // 2つに分割した後、分割後の配列をソート
    int m = (l + r) / 2;
    MergeSort(l, m);
    MergeSort(m, r);

    // マージ操作
    int c1 = l, c2 = m, cnt = 0;
    while(c1 != m || c2 != r) {
        if (c1 == m) {
            // 分割後の前半が空の場合
            C[cnt] = A[c2];
            c2++;
        }
        else if (c2 == r) {
            // 分割後の後半が空の場合
            C[cnt] = A[c1];
            c1++;
        }
        else {
            // そのいずれでもない場合
            if (A[c1] > A[c2]) {
                C[cnt] = A[c2];
                c2++;
            }
            else {
                C[cnt] = A[c1];
                c1++;
            }
        }
        cnt++;
    }

    // マージ後の配列をAに上書き
    for(int i = 0; i < cnt; i++) {
        A[l + i] = C[i];
    }

}

void solve(){
    MergeSort(1, N + 1);
    cout << A[1];
    for(int i = 2; i <= N; i++) {
        cout << " " << A[i];
    }
}

// Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    std::scanf("%d", &N);
    for(int i = 1 ; i <= N ; i++){
        std::scanf("%d", &A[i]);
    }
    solve();
    return 0;
}
