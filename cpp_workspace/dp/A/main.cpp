#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <vector>
#include <deque>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <algorithm>
#include <functional>
#include <utility>
#include <bitset>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cstdio>
#include <cassert>
using namespace std;

template<class T> inline bool chmin(T& a, T b);

void solve(long long N, std::vector<long long> h){
    const long long INF = 1LL << 60;
    // DP table
    long long dp[N];
    // DP table init
    for(int i = 0; i < N; i++) {
        dp[i] = INF;
    }
    // initial condition
    dp[0] = 0;
    dp[1] = abs(h[0] - h[1]);
    // calc min cost from dp[2] to dp[N-1]
    for(int i = 2; i < N; i++) {
        // h[i-1] -> h[i]
        chmin(dp[i], dp[i-1] + abs(h[i-1] - h[i]));
        // h[i-2] -> h[i]
        chmin(dp[i], dp[i-2] + abs(h[i-2] - h[i]));
    }
    cout << dp[N-1] << endl;
}

// Generated by 2.6.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    std::scanf("%lld", &N);
    std::vector<long long> h(N);
    for(int i = 0 ; i < N ; i++){
        std::scanf("%lld", &h[i]);
    }
    solve(N, std::move(h));
    return 0;
}

template<class T> inline bool chmin(T& a, T b) {
    if(a > b) {
        a = b;
        return true;
    }
    return false;
}