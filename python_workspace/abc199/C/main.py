#!/usr/bin/env python3
import sys
import copy

def solve(N, S, Q, T, A, B):
    for t, a, b in zip(T, A, B):
        if t == 1:
            tmp = copy.copy(S)
            tmp[a - 1] = S[b - 1]
            tmp[b - 1] = S[a - 1]
            S = copy.copy(tmp)
        else:
            tmp = []
            tmp.extend(S[N:])
            tmp.extend(S[:N])
            S = copy.copy(tmp)
    print("".join(S))


# Generated by 2.2.0 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
def main():
    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word
    tokens = iterate_tokens()
    N = int(next(tokens))
    S = list(next(tokens))
    Q = int(next(tokens))
    T = []
    A = []
    B = []
    for _ in range(Q):
        T.append(int(next(tokens)))
        A.append(int(next(tokens)))
        B.append(int(next(tokens)))
    solve(N, S, Q, T, A, B)

if __name__ == '__main__':
    main()
